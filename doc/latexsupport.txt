*latexsupport.txt*               LaTeX Support                     Nov 22 2020

LaTeX Support                                     *latex-support* *latexsupport*

                             Plug-in version 2.0beta
                        for Vim version 7.4 and above
                   Wolfgang Mehner <wolfgang-mehner@web.de>
                      Fritz Mehner <mehner.fritz@web.de>

LaTeX-IDE for Vim/gVim/Neovim. It is written to considerably speed up
typesetting a document in a consistent style. This is done by inserting
complete statements, idioms, code snippets, and comments. Compiling and
viewing a document, format conversion and running make can be done with
a few keystrokes.
See the chapter |latexsupport-introduction| for a quick overview and a short
guide to this documentation.

==============================================================================
0.  TABLE OF CONTENTS                                  *latexsupport-contents*
==============================================================================

 1.    Introduction                           |latexsupport-introduction|

 2.    Usage                                  |latexsupport-usage|
 2.1    Comments                              |latexsupport-usage-comments|
 2.1.1   End-of-Line Comments                 |latexsupport-usage-comments-eol|
 2.1.2   Toggle Comment Lines                 |latexsupport-usage-comments-lines|
 2.1.3   Further Comments                     |latexsupport-usage-comments-other|
 2.2    Text, Math, ..                        |latexsupport-usage-templates|
 2.3    Code Snippets                         |latexsupport-usage-snippets|
 2.4    Wizards                               |latexsupport-usage-wizard|
 2.5    Running External Tools                |latexsupport-usage-run|
 2.5.1   Tool Overview                        |latexsupport-usage-tools|
 2.5.2   Typesetters                          |latexsupport-usage-typesetter|
 2.5.3   Additional Maps                      |latexsupport-usage-add-maps|
 2.5.4   Using Quickfix                       |latexsupport-usage-qf|
 2.6    Hardcopy                              |latexsupport-usage-hardcopy|
 2.7    Help                                  |latexsupport-usage-help|
 2.8    Toolbox                               |latexsupport-usage-toolbox|

 3.    Templates                              |latexsupport-templates|
 3.1    Introduction                          |latexsupport-templates-introduction|
 3.2    Customization                         |latexsupport-templates-custom|
 3.3    Jump Tags                             |latexsupport-templates-jump-tags|
 3.4    Split Tags                            |latexsupport-templates-split-tags|
 3.5    Macros                                |latexsupport-templates-macros|
 3.6    Template Files                        |latexsupport-templates-files|
 3.7    Template Libraries                    |latexsupport-templates-libs|
 3.8    File Skeletons                        |latexsupport-file-skeleton|

 4.    Configuration                          |latexsupport-configuration|
 4.1    Typesetters, Viewers, Converters      |latexsupport-config-external|
 4.2    Menus                                 |latexsupport-config-menus|
 4.3    Maps                                  |latexsupport-config-maps|
 4.4    Comments                              |latexsupport-config-comments|
 4.5    Snippets                              |latexsupport-config-snippets|
 4.6    Dictionary                            |latexsupport-config-dictionary|
 4.7    Hardcopy                              |latexsupport-config-hardcopy|
 4.8    Toolbox                               |latexsupport-config-toolbox|

 5.    System-wide Installation               |latexsupport-system-wide|

 A.    Overview of Mappings                   |latexsupport-mappings|
 B.    Files                                  |latexsupport-files|
 C.    Troubleshooting - Known Issues         |latexsupport-troubleshooting|
 D.    Release Notes - Change Log             |latexsupport-release-notes|

==============================================================================
1.  INTRODUCTION                                   *latexsupport-introduction*
==============================================================================

After the first LaTeX file (*.tex) has been opened, the menu "LaTeX" appears
in the menu bar. It holds entries for all the templates (such as
"Text->environment" or "Math->equation"), as well as some other functionality.
The letters on the right name maps, which can also be used to access all the
capabilities. See |latexsupport-mappings| for an overview.
The menus are also created if a GUI is not running. They can be used via >
  :emenu LaTeX.
(Use the arrow keys for navigation, <Enter> to select an entry and <TAB> for
auto completion.)

The features of the plug-in are:
- Turn code lines into comments and vice versa.
    |latexsupport-usage-comments-lines|
- Open the online documentation for a given package or command.
    |latexsupport-usage-help|
- Run the typesetter. |latexsupport-usage-run|
- Change the typesetter on-the-fly. |latexsupport-usage-run|
- Invoke lacheck. |latexsupport-usage-run|
- Run makeglossaries, makeindex, and BibTeX. |latexsupport-usage-run|
- Manage code snippets. |latexsupport-usage-snippets|
- An extendible template library. |latexsupport-templates|
- Make integration. |latexsupport-usage-toolbox|

The usage of most features is described in the chapter |latexsupport-usage|.
The chapter |latexsupport-templates| gives a short introduction to the
template system. The LaTeX executables and other features may require some
configuration, which is documented in the chapter |latexsupport-configuration|.
How to do a system-wide installation is outlined in |latexsupport-system-wide|.

The template system comes with its own documentation, which mainly aims at the
advanced user (see |templatesupport.txt|).

==============================================================================
2.  USAGE                                                 *latexsupport-usage*
==============================================================================

Features are accessible via menu entries and maps. Most maps are preceded by a
mapleader. The leader is an acute accent "´", if the standard configuration is
used.
(The default mapleader in Vim, the backslash "\", is not an appropriate choice
for typesetting in LaTeX. The mapleader is configured via |g:Latex_MapLeader|)

If the root menu 'LaTeX' is not visible you also can load it with the item
"Load LaTeX Support" from the "Tools" menu. The item "Unload LaTeX Support"
can be used to unload the LaTeX root menu.
(Compare |latexsupport-config-menus|.)

------------------------------------------------------------------------------
2.1  COMMENTS                                    *latexsupport-usage-comments*
------------------------------------------------------------------------------

Besides the templates, there is some other functionality provided in the menu
"Comments".

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  add end-of-line comments   Comments.end-of-line comment   <LocalLeader>cl
  adjust end-of-line com.    Comments.adjust end-of-line c. <LocalLeader>cj
  set end-of-line column     Comments.set end-of-line col.  <LocalLeader>cs

  code to comment            Comments.comment               <LocalLeader>cc
 ----------------------------------------------------------------------------

------------------------------------------------------------------------------

2.1.1  End-of-Line Comments                  *latexsupport-usage-comments-eol*

In NORMAL MODE the menu item 'end-of-line comments' will append a comment to
the current line. In VISUAL MODE this item will append aligned comments to all
marked lines. Marking the 3 lines
>
 \fbox{\begin{minipage}[t][30mm][l]{73mm}
 \begin{flushleft}
 \large{\textbf{Ex Commands}}\\[1.0ex]
<
and choosing 'end-of-line comments' will yield
>
 \fbox{\begin{minipage}[t][30mm][l]{73mm}        % |
 \begin{flushleft}                               %
 \large{\textbf{Ex Commands}}\\[1.0ex]           %
<
The cursor position above is marked by '|'. Empty lines will be ignored.

The default starting column is 49 ( = (multiple of 2,4, or 8) + 1 ).  This can
be changed by setting a global variable in the file .vimrc , e.g. : >
  let g:Latex_LineEndCommColDefault = 65
The starting column can also be set by the menu item "Comments->adjust
end-of-line com.". Just position the cursor in an arbitrary column (normal
mode; the column number is shown in the Vim status line) and choose this menu
item. This setting is stored individually for each buffer.
If the cursor was at the end of a line you will be asked for a column number
because this position is most likely not the desired starting column.

------------------------------------------------------------------------------

After some copy/paste/change actions comments may be misaligned:
>
 \fbox{\begin{minipage}[t][30mm][l]{73mm}        % comment 1
 \begin{flushleft}                              % comment 2
 \large{\textbf{Ex Commands}}\\[1.0ex]              % comment 3
<
Realignment can be achieved with the menu item 'adjust end-of-line com.' In
normal mode the comment (if any) in the current line will be aligned to the
end-of-line comment column (see above) if possible. In visual mode the
comments in the marked block will be aligned:
>
 \fbox{\begin{minipage}[t][30mm][l]{73mm}        % comment 1
 \begin{flushleft}                               % comment 2
 \large{\textbf{Ex Commands}}\\[1.0ex]           % comment 3
<
Another way is to use the hotkey `´cj`. In normal and insert mode the current
line will be adjusted. To adjust n lines starting with the current one use
`n\cj`.

------------------------------------------------------------------------------

2.1.2  Toggle Comment Lines                *latexsupport-usage-comments-lines*

The comment sign % can be inserted or removed at the beginning of the current
line or for a marked block, using the menu item 'comment' (or `´cc`). A single
line does not need to be marked.

For a marked block containing only lines with a '%' in the first column (and
possibly empty lines) all lines will be uncommented. A marked block containing
one or more nonempty lines without a '%' in the first column will be changed
into a comment block.

------------------------------------------------------------------------------

2.1.3  Further Comments                    *latexsupport-usage-comments-other*

Frame comments and a file prolog are read as templates from the appropriate
files (see |latexsupport-templates|).

------------------------------------------------------------------------------
2.2  TEXT, MATH, ..                             *latexsupport-usage-templates*
------------------------------------------------------------------------------

The 'Text' and 'Math' menus contain the most frequently used statements. The
menu entries insert some code into the buffer. Almost all menu entries also
have a map, making the same behavior accessible more quickly. E.g. the menu
entry "Text->environment" has the map `´e`.

Many statements behave differently depending on the mode.

NORMAL MODE, INSERT MODE
-------------------------------

If you choose "Text->environment" you will be prompted for the name of an
environment. Type "center" (try tab-completion), then hit <Enter>. An empty
statement will be inserted:
>
  \begin{center}
  |
  \end{center}
<
The character '|' marks the cursor position after insertion.

VISUAL MODE
-------------------------------

Select the following lines:
>
  \textbf{Read this!}
  \textit(Written by my dog.)
<
If you now use the menu entry "Text->environment", the lines will be surrounded
by the statement:
>
  \begin{center}
  \textbf{Read this!}
  \textit(Written by my dog.)
  \end{center}
<
This "split mode" works for many of the menu entries. With the word 'Length'
selected, the map `´msq` or the menu entry "Math->sqrt" will surround it with
the sqrt-statement:
>
  ... \sqrt[|]{Length} ...
<
Lots of submenus are only associated with one map. E.g. all the entries in
"Math->spaces->..." can be accessed via the map `´msp`. You will be prompted
for your choice. Use tab-expansion to display the choices and the arrow keys
to select an item:
>
  large \;  medium \:  qquad  quad  small \,
  choose : large \\;
>
------------------------------------------------------------------------------

The 'BibTeX' menu contains frequently used BibTeX statements. Complete
BibTeX-entries will be inserted from the corresponding template, e.g.
>
  @article{,
    author        = {},
    title         = {},
    journal       = {},
    year          = ,
    volume        = {},
    number        = {},
    pages         = {},
    month         = {},
    note          = {},
  }
<
All entries in the shipped template library list the required fields first, up
to the field "year", then the optional ones "volume", "number", ...

------------------------------------------------------------------------------
2.3  CODE SNIPPETS                               *latexsupport-usage-snippets*
------------------------------------------------------------------------------

Useful code snippets can be kept in a central place. This way, they can
quickly be inserted into the code, using "Snippets -> read code snippet".
New snippets can be created from existing lines of code by selecting them in
visual mode and saving them using "Snippets -> write code snippet".

Code snippets are kept in a directory which can be changed using the setting
|g:Latex_CodeSnippets|.

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  insert code snippet        Snippets.read code snippet     <LocalLeader>nr
  view code snippet          Snippets.view code snippet     <LocalLeader>nv
  create code snippet        Snippets.write code snippet    <LocalLeader>nw
  edit code snippet          Snippets.edit code snippet     <LocalLeader>ne
 ----------------------------------------------------------------------------

Creating a new snippet
----------------------
When nothing is marked, "write code snippet" will write the whole buffer to a
snippet file. Otherwise the marked area will be written to a file.

Insert a snippet
----------------
Select the appropriate file from the snippet directory via "read code snippet".
The inserted lines will be indented.

Indentation / no indentation
----------------------------
Code snippets are normally indented after insertion. To suppress indentation
add the file extension "ni" or "noindent" to the snippet file name, e.g.
>
  xy.tex.noindent
<
There are a few snippets shipped with this plug-in. These are examples, add
your own.

------------------------------------------------------------------------------
2.4  WIZARDS                                       *latexsupport-usage-wizard*
------------------------------------------------------------------------------

This section containing less frequently used statements which have usually
several lines, e.g. listings, tables, or figures. Many of them are implemented
as templates and can thus be adapted by the user.

Two of the wizards, "Wizard->tables->tabbing" and "Wizard->tables->tabular",
prompt the user for the number of rows and columns to insert. The statements
are still inserted using the template library, but changing these templates
requires some caution. (See the comments in the template file "latex-support/
templates/wizard.templates" for instructions.)

The menu item 'ligatures' lets you find double and triple ligatures and split
them if appropriate.

------------------------------------------------------------------------------
2.5  RUNNING EXTERNAL TOOLS                           *latexsupport-usage-run*
------------------------------------------------------------------------------

External tools like the typesetters and BibTeX can be run with a keystroke.
(See Section |latexsupport-config-external| for the configuration.)

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  run the typesetter         Run.save + run typesetter      <LocalLeader>rr
  run lacheck                Run.save + run lacheck         <LocalLeader>rla
  set the main document      Run.set main document          <LocalLeader>rmd
  view errors from last BG   Run.view last errors           <LocalLeader>re

  open the resulting DVI     Run.View.DVI                   <LocalLeader>rdvi
  open the resulting PDF     Run.View.PDF                   <LocalLeader>rpdf
  open the resulting PS      Run.View.PS                    <LocalLeader>rps
  convert the result         Run.Convert.###->###           <LocalLeader>rc

	run makeglossaries         Run.run makeglossaries         <LocalLeader>rmg
	run makeindex              Run.run makeindex              <LocalLeader>rmi
	run BibTeX                 Run.run bibtex                 <LocalLeader>rbi

  change the typesetter      Run.choose typesetter          <LocalLeader>rt
  set the processing mode    Run.external processing        <LocalLeader>rp
 ----------------------------------------------------------------------------

The functionality is also available through ex-commands. These commands can
also be used to set different maps in the |ftplugin|.

  Command                        Explanation
 ----------------------------------------------------------------------------
  *:Latex* [<tex-file>]            run the typesetter
  *:LatexCheck* [<tex-file>]       run lacheck
  *:LatexMainDoc* [<tex-file>]     set the main tex document
  *:LatexErrors*                   view the errors from the last background job

  *:LatexTypesetter* [<typeset>]   change the typesetter
  *:LatexProcessing* [<mode>]      set the processing mode for external commands

  *:LatexBibtex* [<aux-file>]      run BibTeX
  *:LatexMakeglossaries* [<base>]  run makeglossaries
  *:LatexMakeindex* [<idx-file>]   run makeindex
  *:LatexView* ...                 view an external document
  *:LatexConvert* [<doc>]          convert a document
 ----------------------------------------------------------------------------

To run the typesetter for the tex file in the current buffer, use the map `´rr`,
the menu entry "Run->save + run typesetter" or the ex-command |:Latex|. Using
the command, you can also run LaTeX for other files: >
  :Latex some_other_doc.tex
<
You can run the typesetter in the background (requires the |+job| feature or
Neovim). Choose the processing mode via |:LatexProcessing|:  >
  :LatexProcessing background
Now you can continue working while your document is compiling. After the
typesetter finishes, a message is displayed. In case of errors, you can load
them into the |quickfix| buffer using: >
  :LatexErrors
<
When editing larger documents with included files, the facilities for
compiling documents become insufficient, since they try to run the external
tools for the file in the current buffer. You can set the main document via: >
  :LatexMainDoc <tex-file>
Now, when running the typesetter, the working directory will be changed before
compiling the main document.
The call `:LatexView` without arguments will now show the PDF or DVI belonging
to the main document. E.g., when the main doc is `mydir/somefile.tex`, the
file `mydir/somefile.pdf` will be opened in the PDF viewer.

------------------------------------------------------------------------------

2.5.1  Tool Overview                                *latexsupport-usage-tools*

When called without arguments, the external tools are called with default
arguments. If the main document has been set (|:LatexMainDoc|), the default
argument is derived from it. Otherwise, the default is derived from the name
of the current buffer. The default for viewing the document furthermore
depends on the typesetter.

The table shows the capabilities and defaults of each command. Assume you are
editing "myfile.tex" in the current buffer, then the defaults are as follows:

                               uses main   default from     uses background
  Command                      document    current buffer   processing
 ----------------------------------------------------------------------------
  :Latex                       yes         myfile.tex       yes (|+job|)
  :LatexCheck                  no          myfile.tex       no
  :LatexBibtex                 yes         myfile           no
  :LatexMakeglossaries                     myfile
  :LatexMakeindex                          myfile.idx
  :LatexView                   yes         myfile.dvi       always (forked)
    (with typesetter tex or latex)
  :LatexView                   yes         myfile.pdf       always (forked)
    (with typesetter pdf[la]tex or lua[la]tex)
  :LatexConvert                yes         myfile.FROM      yes (|+job|)
    (the default name depends on the conversion operation: FROM-TO)
 ----------------------------------------------------------------------------

Some commands use background processing if it has been set as the processing
mode. The viewers are always run in the background, since they are forked and
do not rely on the |+job| feature.

------------------------------------------------------------------------------

2.5.2  Typesetters                             *latexsupport-usage-typesetter*

The default typesetter is 'pdflatex'. This can be changed by assigning one of
the values 'tex', 'latex', 'pdftex', 'luatex', and 'lualatex' to the variable
|g:Latex_Typesetter| in your .vimrc file: >
  let g:Latex_Typesetter = 'latex'
The typesetter can be changed on-the-fly using: >
  :LatexTypesetter <typesetter>
The way the typesetters are called can be changed in the .vimrc file,
by using one of these configuration variables:
 |g:Latex_Latex|  |g:Latex_Pdflatex|  |g:Latex_Lualatex|
 |g:Latex_Tex|    |g:Latex_Pdftex|    |g:Latex_Luatex|
The predefined calls of the typesetters are: >
  <executable> -src-specials -file-line-error -interaction=nonstopmode
<
------------------------------------------------------------------------------

2.5.3  Additional Maps                           *latexsupport-usage-add-maps*

Additional maps can be defined by the user, using the ex-commands :Latex,
:LatexCheck, :LatexView, ...
To define the following function keys in normal, visual, and insert mode:

         F9   run typesetter
    CTRL-F9   run viewer

add these lines to your Latex filetype plug-in: >

  nnoremap   <buffer>     <F9>        :Latex<CR>
  inoremap   <buffer>     <F9>   <Esc>:Latex<CR>
  vnoremap   <buffer>     <F9>   <Esc>:Latex<CR>
  nnoremap   <buffer>   <C-F9>        :LatexView<CR>
  inoremap   <buffer>   <C-F9>   <Esc>:LatexView<CR>
  vnoremap   <buffer>   <C-F9>   <Esc>:LatexView<CR>
<
------------------------------------------------------------------------------

2.5.4  Using Quickfix                                  *latexsupport-usage-qf*

Vim's QuickFix facility is described here: |quickfix.txt|. It offers a
convenient way to go through all the errors which a program like a compiler or
code checker has found in the code.

It is controlled by the commands:
- |:copen| and |:cclose|    : open or close the quickfix window
- |:cnext| and |:cprevious| : jump to the next or previous error

The fastest way of using them is to put maps like this into your .vimrc file:
>
  noremap  <silent>  <F5>  :copen<CR>
  noremap  <silent>  <F6>  :cclose<CR>
  noremap  <silent>  <F7>  :cprevious<CR>
  noremap  <silent>  <F8>  :cnext<CR>
<
You can now use F5 and F6 to open and close the quickfix window and F7 and F8
to jump to the errors.
Compare the file 'customization.vimrc', see |latexsupport-files|.

------------------------------------------------------------------------------
2.6  HARDCOPY                                    *latexsupport-usage-hardcopy*
------------------------------------------------------------------------------

The current buffer, or a range in it, can be quickly printed into a file,
using the menu entry "Run -> hardcopy to filename.ps".

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  hardcopy to postscript     Run.hardcopy to ...            <LocalLeader>rh
 ----------------------------------------------------------------------------

The file will be put into the current working directory. If the user can not
write there, it is put into the home directory instead.

The printheader on top of each page can be set via |g:Latex_Printheader|.

------------------------------------------------------------------------------
2.7  HELP                                            *latexsupport-usage-help*
------------------------------------------------------------------------------

This sub-menu offers convenient access to various documentations.

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  open English dictionary    Help.English                   <LocalLeader>he
  open texdoc                Help.texdoc                    <LocalLeader>ht
  open plug-in help          Help.help (LaTeX-support)      <LocalLeader>hp
 ----------------------------------------------------------------------------

The entry 'texdoc' starts texdoc for the word (package, command) under the
cursor. If there is no word under the cursor, you will be prompted for the
name of a package.

The entry 'English' opens an online dictionary for the word under the cursor.

The browser for opening online documentation, such as the English dictionary,
can be configured by setting a global variable in your ~/.vimrc (see
|g:Templates_InternetBrowserExec| and |g:Templates_InternetBrowserFlags|): >
  let g:Templates_InternetBrowserExec = 'firefox'
<
------------------------------------------------------------------------------
2.8  TOOLBOX                                      *latexsupport-usage-toolbox*
------------------------------------------------------------------------------

More functionality, not directly related to LaTeX, is provided in the
so-called "Toolbox". By default, an integration for Make is inserted into the
toolbox. For the configuration, see |latexsupport-config-toolbox|. The toolbox
comes with its own documentation, see |toolbox| and |toolbox-make|.

To switch the Tool Box off add the following line to the file .vimrc : >
  let g:Latex_UseToolbox = 'no'
<
The tool box for make provides a menu, and several ex-commands for controlling
running make. To switch the make tool box off add the following line to the
file .vimrc : >
  let g:Latex_UseTool_make = 'no'
The hotkeys for the make tool are can be defined in the filetype plug-in
'~/.vim/ftplugin/tex.vim'. You will find example definitions in the file
'latex-support/rc/tex.vim'.

==============================================================================
3.  TEMPLATES                                         *latexsupport-templates*
==============================================================================

Most of the menu entries insert templates into the current text. Most
templates come with their own map, for fast and convenient access. All maps
start with a mapleader, which can be set to a different value for use within
LaTeX Support (see |g:Latex_MapLeader|).

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  -various templates-        (automatically generated)      <LocalLeader>...
 ----------------------------------------------------------------------------

The following sections provide a short overview of the template system. See
the documentation of the template system for a more in-depth discussion:
|templatesupport.txt|, particularly |template-support-basics|

------------------------------------------------------------------------------
3.1  INTRODUCTION                        *latexsupport-templates-introduction*
------------------------------------------------------------------------------

This plug-in makes heavy use of an extendible template library. A template
library can assist in speeding up the writing of code, while at the same time
ensuring a consistent style. The templates are written in an easy to use
markup language, which enables the user to customize templates without much
hassle. The menu shortcuts (e.g. 'c' for the Comments menu) and the maps
(e.g. `´ct` to insert date and time) are also defined in the template library.

Templates are short pieces of text which can be included into source code or
text of any other kind. But they are not just plain text, they can be extended
with macros and tags to provide further convenience. Macros can be
automatically replaced with the date or the filename, or they can be replaced
with input from the user, for example the name of a new function.

While inserting a template, the user will often be asked to enter some
replacement text on the command line, for example the name of a function. The
replacement text will then be used in the template while it is inserted.
Hitting <ESC> or entering an empty text will abort template insertion.

------------------------------------------------------------------------------
3.2  CUSTOMIZATION                             *latexsupport-templates-custom*
------------------------------------------------------------------------------

The master template file is `$HOME/.vim/latex-support/templates/Templates` for
a user installation and `$VIM/vimfiles/latex-support/templates/Templates` for
a system-wide installation (see |latexsupport-system-wide|).

The template library is customized via your local template files. Use the menu
entries "Snippets -> edit local templates", "Snippets -> edit custom
templates", or "Snippets -> edit personal templates" to get there.

The master template file can be edited itself to adapt the templates/menus to
the users need. Alternatively, a custom template file can be added (see
|g:Latex_CustomTemplateFile|), which eliminates the need to edit stock
templates.

The personalization (name, email, ..., date and time format) can be done in a
special personalization template file (see |g:Templates_PersonalizationFile|).
It will be read by all plug-ins which support this feature, so it should only
contain basic information not pertaining to a specific programming language.
It can be set up using a wizard, which is run by the map `´ntw` or the menu
entry "Snippets -> template setup wizard". Afterwards, use the menu entry
"Snippets -> reread templates" to apply the changes.

Further template files can be added using the call: >
  call mmtemplates#config#Add ( 'latex', '<PATH>/some.templates', 'example', 'nte' )
The first parameter adds the file to your LaTeX templates, the second is the
path. The remaining two optional parameters specify the symbolic name for
these templates and the map to edit them. The map is `´nte` in this example,
if the standard mapleader is set.

------------------------------------------------------------------------------
3.3  JUMP TAGS                              *latexsupport-templates-jump-tags*
------------------------------------------------------------------------------

Templates can include special tags, which mark positions where text needs to
be added: >
  {+TAGNAME+} {-TAGNAME-}
  <+TAGNAME+> <-TAGNAME->
  [+TAGNAME+] [-TAGNAME-]
<
  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  jump to next tag           -                              <CTRL-J>
  delete optional tag        -                              <CTRL-D>
 ----------------------------------------------------------------------------

Use the <CTRL-J> to jump to the next tag. The maps works in normal and insert
mode. Use <CTRL-D> to delete optional tags on the same line, for example: >
  string.match ( <+str+>, <+pattern+>, [+init+] )
The optional argument "init" can be written down after jumping to the tag
using <CTRL-J> or deleted together with the comma using <CTRL-D>. The optional
tags are: `[+TAGNAME+]` `[-TAGNAME-]`

The tags written with minus signs are removed when the template is used in
visual mode, compare the next section: `{-TAGNAME-}` `<-TAGNAME->` `[-TAGNAME-]`

------------------------------------------------------------------------------
3.4  SPLIT TAGS                            *latexsupport-templates-split-tags*
------------------------------------------------------------------------------

Some templates include so-called split tags and can use to surround some lines
of code, or to surround a part of the current line.

Example:

The template "Math.frac" contains a split tag for the nominator:
>
  == Math.frac == insert, map:mfr, sc:f ==
  \frac{<CURSOR><SPLIT>}{<+denominator+>}
  == ENDTEMPLATE ==
<
Consider the formula:
>
  $ c = a + b $
<
After selecting "a + b" and inserting the template, the result looks like
this:
>
  $ c = \frac{a + b}{<+denominator+>} $
<
The cursor is placed within the first pair of brackets, use <CTRL-J> to jump
to the denominator.

------------------------------------------------------------------------------
3.5  MACROS                                    *latexsupport-templates-macros*
------------------------------------------------------------------------------

Macros are placeholders which get replace while a template is inserted. The
template library defines several macros used for personalization:
>
  SetMacro( 'AUTHOR',       'YOUR NAME' )
  SetMacro( 'AUTHORREF',    '' )
  SetMacro( 'EMAIL',        '' )
  SetMacro( 'ORGANIZATION', '' )
  SetMacro( 'COMPANY',      '' )
  SetMacro( 'COPYRIGHT',    'Copyright (c) |YEAR|, |AUTHOR|' )
  SetMacro( 'LICENSE',      'GNU General Public License' )
<
These macros are used by some templates, e.g. the file prolog. Arbitrary
user-defined macros are possible. The macro name must follows the rules for a
C language identifier: first character letter or underscore; case matters;
digits are allowed beginning with the second character.
>
Some predefined macros can help make comments much richer:
>
  |BASENAME|        filename without path and suffix
  |FILENAME|        filename without path
  |PATH|            path without filename
  |SUFFIX|          filename suffix

  |DATE|            the date
  |TIME|            the time
  |YEAR|            the year
<
The date and time formats can be set in the template library, see |strftime()|
for the format specifiers:
>
  SetFormat( 'DATE', '%D'      )
  SetFormat( 'TIME', '%H:%M'   )
  SetFormat( 'YEAR', 'year %Y' )
<
This sets the format for the date to the preferred representation for your
current locale, the time will be inserted as 10:24 and the year will be
represented using four digits.

------------------------------------------------------------------------------
3.6  TEMPLATE FILES                             *latexsupport-templates-files*
------------------------------------------------------------------------------

The template definitions are spread out over several template files. These can
contain comments, lines starting with a section sign (§) are ignored.

Template files can include several further files: >
  IncludeFile( 'comments.templates' )
An included file will be processed before the remainder of the including file.

The template behind a menu item is identified by a given name. The first part
of the name identifies the menu name, the second part identifies the item.
A template definition starts with a template header with the following syntax:

  == menu_name.template_name == options ==

The options are described here: |template-support-options|

------------------------------------------------------------------------------
3.7  TEMPLATE LIBRARIES                          *latexsupport-templates-libs*
------------------------------------------------------------------------------

The template system comes with several auxiliary functions.

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  edit the global template   Snippets.edit global templates <LocalLeader>ntg
    library (^1)
  edit the local template    Snippets.edit local templates  <LocalLeader>ntl
    library
  edit the custom template   Snippets.edit custom templates <LocalLeader>ntc
    library
  edit the personal templ.   Snippets.edit personal templ.  <LocalLeader>ntp
    library
  reread the templates       Snippets.reread templates      <LocalLeader>ntr
  setup wizard               Snippets.template setup wizard <LocalLeader>ntw
  choose a style             Snippets.choose style          <LocalLeader>nts
 ----------------------------------------------------------------------------

(^1) system-wide installation only

The menu items "Snippets->edit ... templates" open various template files. The
stock templates are usually located in the "local" template file: >
  ~/.vim/latex-support/templates/Templates
The template files named "custom" and "personal" can be used for
customization, which avoids editing the stock templates.
There may be dependent files loaded from the main files. Change whatever file
you want, save it, and click on the menu item "reread templates" to read in
the file(s) and to rebuild the internal representation of the templates.

For how to use these files to configure and personalize the template library,
see |latexsupport-templates-custom|. For help with setting up the template
library, use the setup wizard:
  Latex -> Snippets -> template setup wizard

Template Browser
----------------
When editing a template file, it is selected via |:Explore|. You can change
this behavior by setting a global variable in your ~/.vimrc (see
|g:Templates_TemplateBrowser|):
>
  let g:Templates_TemplateBrowser = 'browse'
<
Template Style
--------------
The template system supports different template styles. If there are more than
one style the menu item "choose style" let you choose a style on the fly.

Template Locations
------------------
                        *g:Latex_LocalTemplateFile* *g:Latex_GlobalTemplateFile*
                                                  *g:Latex_CustomTemplateFile*
The variables `g:Latex_LocalTemplateFile` and `g:Latex_GlobalTemplateFile` set the
locations and names of the local and global template files, respectively.
The standard locations of the template files can be changed via these
configuration variables, e.g.: >
  let g:Latex_CustomTemplateFile = $HOME.'/.vim/my-templates/latex.templates'
<
  Variable                     Default Linux
 ----------------------------------------------------------------------------
  g:Latex_CustomTemplateFile   $HOME/.vim/templates/latex.templates
  g:Latex_GlobalTemplateFile   $VIMRUNTIME/latex-support/templates/Templates
  g:Latex_LocalTemplateFile    $HOME/.vim/latex-support/templates/Templates
 ----------------------------------------------------------------------------

  Variable                     Default Windows
 ----------------------------------------------------------------------------
  g:Latex_CustomTemplateFile   $HOME/vimfiles/templates/latex.templates
  g:Latex_GlobalTemplateFile   $VIMRUNTIME/latex-support/templates/Templates
  g:Latex_LocalTemplateFile    $HOME/vimfiles/latex-support/templates/Templates
 ----------------------------------------------------------------------------

The personalization file is located in a directory relative to |runtimepath|: >
  <RUNTIMEPATH>/templates/personal.templates
For configuring the personalization file, see |g:Templates_PersonalizationFile|.

------------------------------------------------------------------------------
3.8  FILE SKELETONS                               *latexsupport-file-skeleton*
------------------------------------------------------------------------------
                                                    *g:Latex_InsertFileProlog*
If g:Latex_InsertFileProlog is set to "yes", a file skeleton is automatically
inserted into new LaTeX documents. The list of templates used to create this
skeleton is specified in the template library. For this purpose a property is
used, which can for example be set in the customization file
(see |latexsupport-templates-custom|).

This automatic insertion can be switched off by adding this to the `.vimrc`: >
  let g:Latex_InsertFileProlog = 'no'
<
                                                 *Latex::FileSkeleton::Script*
The file skeleton is controlled via this property, which can be set in one
of the template files: >
  SetProperty ( 'Latex::FileSkeleton::Script', 'Comments.file prolog' )
This inserts only a comment box to document the file. To disable the insertion
completely, set the property to an empty string: >
  SetProperty ( 'Latex::FileSkeleton::Script', '' )
In general, this property is a semicolon-separated list of templates to be
inserted: >
  SetProperty ( 'Latex::FileSkeleton::Script', 'Comments.file prolog; ;Skeleton.packages; ;Skeleton.document' )
This will insert a file description, and two file skeleton templates, one with
"\usepackage" commands and one with a skeleton of the document environment. If
a space appears as an entry in the list, an empty line is inserted: >
  '...; ;...'
<
==============================================================================
4.  CONFIGURATION                                 *latexsupport-configuration*
==============================================================================

The basic configuration is done via a number of global variables, which can be
set in the `.vimrc` file. All the typesetters, viewers, and converters calls can
also be adapted, see below.

  Variable                   Default       Description
 ----------------------------------------------------------------------------
  |g:Latex_TexFlavor|          'latex'       filetype when starting to edit
                                             an empty file *.tex
  |g:Latex_Typesetter|         'pdflatex'    the typesetter used on start-up
  |g:Latex_Processing|         'foreground'  how to run external processes

  |g:Latex_LoadMenus|          'auto'        when to load the menus ('startup',
                                            'auto' or 'manual')
  |g:Latex_RootMenu|           'LaTe&X'      name and shortcut of the root menu
  |g:Latex_MapLeader|          '´'           the |maplocalleader| used for maps
  |g:Latex_Ctrl_j|             'yes'         generate the <CTRL-J> map
  |g:Latex_Ctrl_d|             'yes'         generate the <CTRL-D> map

  |g:Latex_InsertFileProlog|   'yes'         insert a file header automatically
  |g:Latex_LineEndCommColDefault|            standard column used for end-of-
                             49              line comments

  |g:Latex_CodeSnippets|       (see below)   directory with code snippets
  |g:Latex_GuiSnippetBrowser|  'gui'         browser to select code snippets

  |g:Latex_LocalTemplateFile|  (see Chp. 3)  the local top-level template file
  |g:Latex_GlobalTemplateFile| (see Chp. 3)  the global top-level template file
  |g:Latex_CustomTemplateFile| (see Chp. 3)  the optional custom template file
  |g:Templates_PersonalizationFile|
                             (see Chp. 3)  the personalization template file

  |g:Latex_Dictionary_File|    ''            word list used for completion
  |g:Latex_Printheader|        '...'         printheader used for hardcopy

  |g:Latex_UseToolbox|         'yes'         use the toolbox
  |g:Latex_UseTool_make|       'yes'         use the make tool

  |g:Templates_InternetBrowserExec|          the browser executable
  |g:Templates_InternetBrowserFlags|         additional browser flags
 ----------------------------------------------------------------------------

Further customization is carried out in the template library, see
|latexsupport-templates-custom| and |latexsupport-file-skeleton|.

------------------------------------------------------------------------------
                                                           *g:Latex_TexFlavor*
When a new file `*.tex` is created, Vim sets its filetype to 'plaintex'. The
maps and automations this plug-in provides only work for the filetype 'latex'.
The plug-in therefore automatically adjusts the filetype of newly created
`*.tex` files to 'latex'. This behavior can be switched off by setting: >
  g:Latex_TexFlavor = 'plaintex'
<
------------------------------------------------------------------------------
4.1  Typesetters, Viewers, Converters           *latexsupport-config-external*
------------------------------------------------------------------------------

The typesetter are configured using the variables `g:Latex_<typesetter>`:

  Variable            Default Linux
 ----------------------------------------------------------------------------
  *g:Latex_Latex*       latex    -src-specials -file-line-error -interaction=nonstopmode
  *g:Latex_Tex*         tex      -src-specials -file-line-error -interaction=nonstopmode
  *g:Latex_Pdflatex*    pdflatex -src-specials -file-line-error -interaction=nonstopmode
  *g:Latex_Pdftex*      pdftex   -src-specials -file-line-error -interaction=nonstopmode
  *g:Latex_Lualatex*    lualatex --file-line-error --interaction=nonstopmode
  *g:Latex_Luatex*      luatex   --file-line-error --interaction=nonstopmode
  *g:Latex_Bibtex*      bibtex
 ----------------------------------------------------------------------------

  Variable            Default Windows
 ----------------------------------------------------------------------------
  g:Latex_Latex       latex.exe    -src-specials -file-line-error -interaction=nonstopmode
  g:Latex_Tex         tex.exe      -src-specials -file-line-error -interaction=nonstopmode
  g:Latex_Pdflatex    pdflatex.exe -src-specials -file-line-error -interaction=nonstopmode
  g:Latex_Pdftex      pdftex.exe   -src-specials -file-line-error -interaction=nonstopmode
  g:Latex_Bibtex      bibtex.exe
 ----------------------------------------------------------------------------

                                                          *g:Latex_Typesetter*
The typesetter used on start-up is set via `g:Latex_Typesetter`: >
  let g:Latex_Typesetter = 'lualatex'
Possible values are 'pdflatex', 'pdftex', 'latex', 'tex', 'lualatex', or
'luatex', corresponding to the typesetters listed above. The typesetter can be
changed on-the-fly using: >
  :LatexTypesetter <typesetter>
<
------------------------------------------------------------------------------

The viewers are configured using the variables `g:Latex_<format>Viewer`:

  Variable            Default Linux          Default Windows
 ----------------------------------------------------------------------------
  *g:Latex_DviViewer*   xdvi                   dviout.exe
  *g:Latex_PdfViewer*   acroread
  *g:Latex_PsViewer*    gv
 ----------------------------------------------------------------------------

For example: >
  let g:Latex_PdfViewer = 'evince'
<
------------------------------------------------------------------------------

The converters are configured using the variables `g:Latex_<from><to>`:

  Variable            Default Linux          Default Windows
 ----------------------------------------------------------------------------
  *g:Latex_DviPdf*      dvipdft                dvipdfm.exe
  *g:Latex_DviPng*      dvipng                 dvipng.exe
  *g:Latex_DviPs*       dvips                  dvips.exe
  *g:Latex_EpsPdf*      ps2pdf -dEPSCrop       n/a
  *g:Latex_PdfPng*      convert                n/a
  *g:Latex_PsPdf*       ps2pdf                 ps2pdf.exe
 ----------------------------------------------------------------------------

------------------------------------------------------------------------------
                                                          *g:Latex_Processing*
External programs such as the typesetter can be run in the background by
setting the variable: >
 g:Latex_Processing = 'background'
<
  Value          Meaning
 ----------------------------------------------------------------------------
  'foreground'   blocks the editor until the external process is done
  'background'   runs the process asynchronously and displays a message
                 once it is done (requires the |+job| feature or Neovim)
 ----------------------------------------------------------------------------

The behavior can be changed on-the-fly using the menu entry or the ex-command: >
  :LatexProcessing <typesetter>
<
------------------------------------------------------------------------------
4.2  MENUS                                         *latexsupport-config-menus*
------------------------------------------------------------------------------
                                                           *g:Latex_LoadMenus*
The creation of the menus is controlled by `g:Latex_LoadMenus`. The default
setting: >
  let g:Latex_LoadMenus = 'auto'
causes the templates to be loaded and the menus to be created when the first
LaTeX file is opened.
The menus appear right away after starting Vim with the setting: >
  let g:Latex_LoadMenus = 'startup'
This has the disadvantage that the templates have to be loaded during the
startup of Vim, which might cause a noticeable slowdown on older systems.
The automatic creation of the menus is prevented by: >
  let g:Latex_LoadMenus = 'manual'
Now the menus can only be loaded by using the tool menu entry "Tools -> Load
LaTeX Support".

                                                  *g:Latex_CreateMenusDelayed*
The old setting `g:Latex_CreateMenusDelayed` still works for backwards
compatibility, use the above values for |g:Latex_LoadMenus| instead.

                                                            *g:Latex_RootMenu*
The name and shortcut of the root menu is set via `g:Latex_RootMenu`. The
character prefixed by '&' will be the shortcut.
>
Example: >
  let g:Latex_RootMenu = '&Plugin.&LaTeX'
Creates the LaTeX menu as a submenu of "Plugin", and sets the shortcut to 'l'.

------------------------------------------------------------------------------
4.3  MAPS                                           *latexsupport-config-maps*
------------------------------------------------------------------------------
                                                           *g:Latex_MapLeader*
All the maps the plug-in creates use |maplocalleader|. It can be changed by
setting the variable `g:Latex_MapLeader`. If it contains the empty string,
Vim's default (backslash) is used.

Example: >
  let g:Latex_MapLeader = '#'
Sets the mapleader to '#'.

                                                        *Latex_SetMapLeader()*
                                                      *Latex_ResetMapLeader()*
The configured mapleader can also be used in the |ftplugin|, by calling the
functions `Latex_SetMapLeader()` and `Latex_ResetMapLeader()`. The maps
created between the two calls will use |g:Latex_MapLeader| as the
|<LocalLeader>|:
>
  call Latex_SetMapLeader ()

  map  <buffer>  <LocalLeader>eg  :echo "Example Map :)"<CR>

  call Latex_ResetMapLeader ()
<
                                               *g:Latex_Ctrl_j* *g:Latex_Ctrl_d*
The creation of the <CTRL-J> and <CTRL-D> maps is controlled by the variables
`g:Latex_Ctrl_j` and `g:Latex_Ctrl_d`, respectively. To disable <CTRL-D>, set the
variable to "no": >
  let g:Latex_Ctrl_d = 'no'
<
------------------------------------------------------------------------------
4.4  COMMENTS                                   *latexsupport-config-comments*
------------------------------------------------------------------------------

When a new TeX file is opened, the plug-in automatically inserts a file
header, which is the template "Comments -> file prolog". This behavior can be
switched off by adding this to the .vimrc: >
  let g:Latex_InsertFileProlog = 'no'
The behavior can be changed on the fly by settings the variable to a different
value on the command line.

Further customization of the file skeletons is possible through use of the
template library (see |latexsupport-file-skeleton|).

                                               *g:Latex_LineEndCommColDefault*
The standard column used for end-of-line comments is configured using
`g:Latex_LineEndCommentColumn`. The column can then be set individually for each
buffer, using the menu entry "Comments -> set end-of-line com. col.".

Example: >
  g:Latex_LineEndCommColDefault = 59
<
------------------------------------------------------------------------------
4.5  SNIPPETS                                   *latexsupport-config-snippets*
------------------------------------------------------------------------------
                                                        *g:Latex_CodeSnippets*
The variable `g:Latex_Snippets` sets the location of the code snippet directory.
The default value depends on the type of installation and the operating
system.

(Path separators are always written as slashes '/', even for Windows.)

For a local installation, the default will be (UNIX/Linux): >
  s:Latex_Snippets = $HOME.'/.vim/latex-support/codesnippets/'
or (Windows): >
  s:Latex_Snippets = $HOME.'/vimfiles/latex-support/codesnippets'
<
For a sytem-wide installation, the default will be: >
  s:Latex_Snippets = $VIM.'/vimfiles/latex-support/codesnippets'
<
Example:

To set a different code snippet directory, add this line to your vimrc: >
  let g:Latex_Snippets = $HOME.'/myvim/tex/codesnippets/'
<
                                                   *g:Latex_GuiSnippetBrowser*
Code snippets can either be selected in a file browser, by setting: >
  let g:Latex_GuiSnippetBrowser = 'gui'
or on the command line by setting: >
  let g:Latex_GuiSnippetBrowser = 'commandline'
<
------------------------------------------------------------------------------
4.6  DICTIONARY                               *latexsupport-config-dictionary*
------------------------------------------------------------------------------
                                                     *g:Latex_Dictionary_File*
The file "latex-keywords.list" contains words used as dictionary for automatic
word completion.  This feature is enabled by default. The default word list is >
  $HOME/.vim/latex-support/wordlists/latex-keywords.list
If you want to use an additional list MyLatex.List put the following line into
the vimrc:
>
 let g:Latex_Dictionary_File = "$HOME/.vim/latex-support/wordlists/latex-keywords.list,".
                           \   "$HOME/any_of_my_directories/MyLatex.List"
<
The right side is a comma separated list of files. Note the point at the end
of the first line (string concatenation) and the backslash in front of the
second line (continuation line).
You can then use Vim's dictionary feature |i_CTRL-X_CTRL-K| inside tex-files,
and also |i_CTRL-P| and |i_CTRL-N|, depending on how 'complete' is set.

------------------------------------------------------------------------------
4.7  HARDCOPY                                   *latexsupport-config-hardcopy*
------------------------------------------------------------------------------
                                                         *g:Latex_Printheader*
The printheader used by "Run -> hardcopy to filename.ps" is set via the
variable `g:Latex_Printheader`. It is temporarily set as the value of
'printheader' while printing the hardcopy. See the documentation of the
option 'printheader' for the possible contents of `g:Latex_Printheader`. The
default is: >
  let g:Latex_Printheader = "%<%f%h%m%<  %=%{strftime('%x %X')}     Page %N"
<
The behavior can be changed on the fly by settings the variable to a different
value on the command line.

------------------------------------------------------------------------------
4.8  TOOLBOX                                     *latexsupport-config-toolbox*
------------------------------------------------------------------------------
                                                          *g:Latex_UseToolbox*
                                                        *g:Latex_UseTool_make*
The loading of the toolbox can be prevented by adding this setting to the
vimrc: >
  let g:Latex_UseToolbox = 'no'
A single tool can be disabled by setting `g:Latex_UseTool_<toolname>`, in case
of the "make" tool: >
  let g:Latex_UseTool_make = 'no'
<
==============================================================================
5.  SYSTEM-WIDE INSTALLATION                        *latexsupport-system-wide*
==============================================================================

A system-wide installation (one installation for all users) is done as
follows.

As *** SUPERUSER *** :

(1) Find the Vim installation directory.
The Vim ex-command `:echo $VIM` gives '/usr/local/share/vim' or something like
that. Beyond this directory you will find the Vim installation, e.g. in
'/usr/local/share/vim/vim73' if Vim version 7.3 has been installed (Windows:
'C:\Program Files\Vim').

(2) Create a new subdirectory 'vimfiles', e.g. '/usr/local/share/vim/vimfiles'
(Windows: 'C:\Program Files\Vim\vimfiles').

(3) Install LaTeX Support
Copy the archive 'latex-support.zip' to this new directory and unpack it: >
  unzip latex-support.zip
<
(4) Generate the help tags: >
  :helptags $VIM/vimfiles/doc
<
SPECIAL CASES. Some Linux distributions use non-standard names for Vim
directories. SUSE has a directory '/usr/share/vim/site' to put plug-ins in.
These directories will not be found automatically. After installing the
plug-in below '/usr/share/vim/site' the use of the templates will be enabled
by the following line in '$HOME/.vimrc':
>
  let g:Latex_GlobalTemplateFile = '/usr/share/vim/site/latex-support/templates/Templates'
<
------------------------------------------------------------------------------

As *** USER *** :

Use the template setup wizard:
  LaTeX -> Snippets -> template setup wizard
to create a personalization file and/or a custom template file.

The personalization file will be read by all plug-ins supporting this feature,
and should contain only information relevant for all template libraries. You
can set some macros in this file with your personal information in order to
obtain personalized comments, e.g. something like this:
>
  SetMacro( 'AUTHOR',      'Wolfgang Mehner' )
  SetMacro( 'AUTHORREF',   'WM' )
  SetMacro( 'EMAIL',       'wolfgang-mehner@web.de' )
  SetMacro( 'COPYRIGHT',   'Copyright (c) |YEAR|, |AUTHOR|' )
<
Use the custom template file for LaTeX templates which override the global
templates or to add new ones.

The old system (before version 1.2), using a "local" template file, >
  ~/.vim/latex-support/templates
is still supported for backwards compatibility.

Create your private snippet directory: >
  mkdir --parents  $HOME/.vim/latex-support/codesnippets
You may want to copy the snippets coming with this plug-in (in
$VIM/vimfiles/latex-support/codesnippets) into the new directory or to set a
link to the global directory.

==============================================================================
A.  OVERVIEW OF MAPPINGS                               *latexsupport-mappings*
==============================================================================

Almost all functionality is accessible using key mappings. These mappings are
also described in the reference card 'latex-support/doc/latex-hotkeys.pdf'.

All mappings are filetype specific; they are only defined for buffers with
filetype 'tex' to minimize conflicts with mappings from other plug-ins.
Furthermore, the mapleader can be changed using the setting |g:Latex_MapLeader|.

All maps work in normal and insert mode. Additionally some mappings can be
used with a range (of lines). In normal mode >
  ´cl
appends a end-of-line comment to the current line, whereas >
  4´cl
appends end-of-line comments to the 4 lines starting with the current line.

Legend:  visual mode:    (v) use range, (s) surround content,
                         [n] range
         tab-completion: (T) specialized, (F) filenames

  -----------------------------------------------------------------
   Jump Tags
  -----------------------------------------------------------------
  <CTRL-J>   jump to next tag
  <CTRL-D>   delete an optional tag

  -----------------------------------------------------------------
   Help
  -----------------------------------------------------------------

   for the word under the cursor ...
     ´he        open an English dictionary
     ´ht        start texdoc

     ´hp        display plug-in help

  -----------------------------------------------------------------
   Comments
  -----------------------------------------------------------------
  [n]´cl        end-of-line comment             (v)
  [n]´cj        adjust end-of-line comments     (v)
     ´cs        set end-of-line comment col.
  [n]´cc        toggle comment                  (v)

     ´cfr1      frame comment, type 1
     ´cfr2      frame comment, type 2
     ´cfr3      frame comment, type 3
     ´cp        file prolog

     ´cm        plug-in macros                  (T)
     ´cd        date
     ´ct        date & time

  -----------------------------------------------------------------
   Document
  -----------------------------------------------------------------
     ´dc        document class                  (T)
     ´di        indices                         (T)
     ´dti       title
     ´dbi       bibliography                    (T)
     ´dac       addcontentsline

     ´dln       newlength
     ´dls       setlength
     ´dla       addtolength
     ´dlp       print length
     ´dlt       set length to

  -----------------------------------------------------------------
   Text
  -----------------------------------------------------------------
     ´e         environment                     (s, T)
     ´to        organization                    (T)
     ´ts        section                         (T)
     ´tld       list environment, description
     ´tle       list environment, enumerate
     ´tli       list environment, itemize
     ´tll       list environment, list
     ´tlit      list environment, item
     ´tlil      list environment, item+labels
     ´tf        font style                      (s, T)
     ´tfs       font size                       (s, T)
     ´tq        quotes                          (s, T)
     ´tsp       spacing                         (T)
     ´tal       line alignment + spacing        (s, T)
     ´tac       accents                         (T)
     ´ttc       textcomp characters             (T)

     ´tbi       bibitem
     ´tci       cite
     ´tfo       footnote
     ´tin       index
     ´tla       label
     ´tma       marginpar
     ´tco       newcommand
     ´tnc       nocite
     ´tpa       pageref
     ´tre       ref
     ´tur       url                             (s)

  -----------------------------------------------------------------
   Math
  -----------------------------------------------------------------
     ´msp      spaces                           (T)
     ´mac      accents                          (T)
     ´mfs      font styles                      (T)
     ´md       delimiter                        (T)
     ´mf       functions                        (T)
     ´mgl      lowercase  greek                 (T)
     ´mgu      uppercase greek                  (T)
     ´mo       operators                        (T)
     ´mr       relations                        (T)
     ´mar      arrows                           (T)

     ´me       equation+label                   (s)
     ´mea      eqnarray+label                   (s)

     ´mca      cases
     ´mch      choose                           (s)
     ´mfr      frac                             (s)
     ´mma      matrix
     ´mnr      nth root                         (s)
     ´mon      operatorname                     (s)
     ´mov      overset                          (s)
     ´mpr      prod                             (s)
     ´msi      sideset                          (s)
     ´msq      sqrt                             (s)
     ´msu      sum                              (s)
     ´mun      underset                         (s)

  -----------------------------------------------------------------
   Wizard
  -----------------------------------------------------------------
     ´wll       lstlisting                      (s)
     ´wlil      lstinputlisting
     ´wlin      lstinline                       (s)
     ´wls       lstset                          (T)

     ´wtt       table                           (s)
     ´wtf       table, floating                 (s)
     ´wtg       tabbing
     ´wtr       tabular

     ´wf        figure
     ´wff       floatingfigure
     ´wwf       wrapfigure

     ´wbf       fbox                            (s)
     ´wbfr      framebox                        (s)
     ´wbm       mbox                            (s)
     ´wbmb      makebox                         (s)
     ´wmp       minipage                        (s)
     ´wbp       parbox                          (s)

  -----------------------------------------------------------------
   Snippets
  -----------------------------------------------------------------
     ´nr       read code snippet
     ´nw       write code snippet               (v)
     ´nv       view code snippet
     ´ne       edit code snippet

     ´ntg      edit global templates
     ´ntl      edit local templates
     ´ntc      edit custom templates
     ´ntp      edit personal templates
     ´ntr      reread templates
     ´ntw      template setup wizard
     ´nts      choose style                     (T)

  -----------------------------------------------------------------
   Run
  -----------------------------------------------------------------
     ´rr        save + run typesetter
     ´rla       save + run lacheck
     ´rmd       set main document               (F)
     ´re        view errors from bg. process
     ´rdvi      view DVI
     ´rpdf      view PDF
     ´rps       view PS
     ´rc        run a converter                 (T)
     ´rmg       run makeglossaries
     ´rmi       run makeindex
     ´rbi       run bibtex
     ´rt        choose the typesetter           (T)
     ´rp        method for external processing  (T)
     ´rh        hardcopy buffer to postscript   (v)
     ´rs        show plug-in settings

  -----------------------------------------------------------------
   Tool Box
  -----------------------------------------------------------------
     ´rm        run make
     ´rmc       run make clean
     ´rma       command line arguments for make (F)
     ´rcm       choose make file                (F)

==============================================================================
B.  FILES                                                 *latexsupport-files*
==============================================================================

README.md                         The starting point.

autoload/mmtemplates/*            The template system.
autoload/mmtoolbox/*              The toolbox (make, ...).

doc/latexsupport.txt              The help file for LaTeX Support.
doc/templatesupport.txt           The help file for the template system.
doc/toolbox*.txt                  The help files for the toolbox.

plugin/latex-support.vim          The LaTeX plug-in for Vim/gVim/Neovim.

latex-support/codesnippets/       The code snippets directory.

latex-support/templates/*         The template files.

latex-support/wordlists/latex-keywords.list
                                  A file used as the dictionary
                                  for automatic word completion.

--------------------------------------------------------------
 The following files and extensions are for convenience only.
 `latex-support.vim` will work without them.
--------------------------------------------------------------

ftdetect/template.vim
ftplugin/template.vim
syntax/template.vim               Additional files for working with templates.

latex-support/...
  .../doc/latex-hotkeys.pdf       Reference card for the key mappings.
  .../doc/ChangeLog               The change log.

latex-support/...
  .../rc/customization.ctags      Additional settings for use in .ctags.
  .../rc/customization.gvimrc     Additional settings for use in .gvimrc.
  .../rc/customization.vimrc      Additional settings for use in .vimrc:
                                    incremental search, tabstop, hot keys,
                                    font, use of dictionaries, ...
                                  The file is commented. Append it to your
                                  .vimrc if you like.

  .../rc/make.vim                 Suggestion for a filetype plug-in.
  .../rc/tex.vim                  Suggestion for a filetype plug-in.
  .../rc/*.templates              Sample template files for customization.
                                  Used by the customization template setup wizard.

==============================================================================
C.  TROUBLESHOOTING - KNOWN ISSUES              *latexsupport-troubleshooting*
==============================================================================

* Some menus, such as "LaTeX -> Math -> greek lowercase" are not displayed
  correctly.
  - The character encoding used inside Vim is controlled by the option
    |'encoding'| (the encoding of files can be different, see |'fileencoding'|).
    It can be set by adding this lines to your '$HOME/.vimrc':
      :set encoding=utf-8
    Create one if there is none, or better use customization.vimrc.

==============================================================================
D.  RELEASE NOTES - CHANGE LOG                    *latexsupport-release-notes*
==============================================================================

See files 'latex-support/README.md' and 'latex-support/doc/ChangeLog'.

==============================================================================
vim:tw=78:expandtab:ts=2:ft=help:norl:
